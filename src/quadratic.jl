# the solution of quadratic polynominal of s34
function kumar15_quadratic(m, m1, m2, m3, m4, m5, s1, s2, s3, u1, u2, u3, t2, t3)
    # tmp_x refers to the coefficients of s34
    tmp_a = (1 / 32 * (-(m^2 + m2^2 - u1) * ((m^2 + m1^2 - s1) * (-s2 + s3 - t2 + u1) - 2 * m1^2 * (m^2 + m3^2 - u2)) + (m^2 + m3^2 - u2) * (2 * m1^2 * (m^2 + m2^2 - u1) - (m^2 + m1^2 - s1) * (m^2 - s1 + s2 - u1)) + 2 * (-m^2 * (m1^2 * (m2^2 - s1 + s2) + m2^2 * (s2 - u1) + s1 * s2 + s1 * u1 - s2^2 + s2 * u1) + m^4 * s2 + m1^2 * (-m2^2 * (s1 + s2 + u1) + m2^4 + u1 * (s2 - s1)) + m1^4 * m2^2 + s1 * (m2^2 * (s2 - u1) + u1 * (s1 - s2 + u1))) - (-s2 + s3 - t2 + u1) * (m^2 * (m1^2 + m2^2 + s1 - 2 * s2 + u1) - m^4 + (m1^2 - s1) * (m2^2 - u1)) + (m^2 - s1 + s2 - u1) * (2 * m^2 * (-s2 + s3 - t2 + u1) - (m^2 + m1^2 - s1) * (m^2 + m3^2 - u2)) - (-s2 + s3 - t2 + u1) * ((m^2 + m1^2 - s1) * (m^2 + m3^2 - u2) - 2 * m^2 * (-s2 + s3 - t2 + u1)) + (m^2 + m3^2 - u2) * (2 * m1^2 * (m^2 + m3^2 - u2) - (m^2 + m1^2 - s1) * (-s2 + s3 - t2 + u1)) + 2 * m3^2 * ((m^2 + m1^2 - s1)^2 - 4 * m^2 * m1^2) - (4 * m^2 * m1^2 - (m^2 + m1^2 - s1)^2) * (m^2 + t2 - u1 - u2) + ((m^2 + m1^2 - s1)^2 - 4 * m^2 * m1^2) * (m^2 + t2 - u1 - u2)))
    tmp_b = (1 / 32 * (2((m^2 + m2^2 - u1) * ((m^2 + m1^2 - s1) * (m5^2 - s3 + t2 - t3) - 2 * m1^2 * (m^2 + m4^2 - u3)) - (m^2 - s1 + s2 - u1) * (2 * m^2 * (m5^2 - s3 + t2 - t3) - (m^2 + m1^2 - s1) * (m^2 + m4^2 - u3)) + (4 * m^2 * m1^2 - (m^2 + m1^2 - s1)^2) * (m^2 - t2 + t3 - u3)) * m3^2 - (m5^2 - s3 + t2 - t3) * (-2 * (2 * m^2 * (-s2 + s3 - t2 + u1) - (m^2 + m1^2 - s1) * (m^2 + m3^2 - u2)) * m2^2 - 2 * m3^2 * (-m^4 + (m1^2 + m2^2 + s1 - 2 * s2 + u1) * m^2 + (m1^2 - s1) * (m2^2 - u1)) + (m^2 + m2^2 - u1) * ((m^2 + m2^2 - u1) * (-s2 + s3 - t2 + u1) - (m^2 - s1 + s2 - u1) * (m^2 + m3^2 - u2)) - ((m^2 - s1 + s2 - u1) * (m^2 + m3^2 - u2) - (m^2 + m2^2 - u1) * (-s2 + s3 - t2 + u1)) * (m^2 + m3^2 - u2) + (m^4 - (m1^2 + m2^2 + s1 - 2 * s2 + u1) * m^2 - (m1^2 - s1) * (m2^2 - u1)) * (m^2 + t2 - u1 - u2) + ((m^2 + m1^2 - s1) * (m^2 + m3^2 - u2) - 2 * m^2 * (-s2 + s3 - t2 + u1)) * (m^2 + t2 - u1 - u2)) + (m^2 + t2 - u1 - u2) * ((m^2 + m2^2 - u1) * ((m^2 + m1^2 - s1) * (m5^2 - s3 + t2 - t3) - 2 * m1^2 * (m^2 + m4^2 - u3)) - (m^2 - s1 + s2 - u1) * (2 * m^2 * (m5^2 - s3 + t2 - t3) - (m^2 + m1^2 - s1) * (m^2 + m4^2 - u3)) + (4 * m^2 * m1^2 - (m^2 + m1^2 - s1)^2) * (m^2 - t2 + t3 - u3)) + (m^2 + m3^2 - u2) * (-2 * ((m^2 + m1^2 - s1) * (m5^2 - s3 + t2 - t3) - 2 * m1^2 * (m^2 + m4^2 - u3)) * m2^2 + (m^2 - s1 + s2 - u1) * ((m5^2 - s3 + t2 - t3) * (m^2 + m2^2 - u1) - (m^2 - s1 + s2 - u1) * (m^2 + m4^2 - u3)) + ((m^2 + m1^2 - s1) * (m^2 - s1 + s2 - u1) - 2 * m1^2 * (m^2 + m2^2 - u1)) * (m^2 - t2 + t3 - u3)) - (-s2 + s3 - t2 + u1) * (-2 * (2 * m^2 * (m5^2 - s3 + t2 - t3) - (m^2 + m1^2 - s1) * (m^2 + m4^2 - u3)) * m2^2 + (m^2 + m2^2 - u1) * ((m5^2 - s3 + t2 - t3) * (m^2 + m2^2 - u1) - (m^2 - s1 + s2 - u1) * (m^2 + m4^2 - u3)) + (m^4 - (m1^2 + m2^2 + s1 - 2 * s2 + u1) * m^2 - (m1^2 - s1) * (m2^2 - u1)) * (m^2 - t2 + t3 - u3)) + (m^2 + m3^2 - u2) * (-((m^2 + t2 - u1 - u2) * ((m^2 + m1^2 - s1) * (m5^2 - s3 + t2 - t3) - 2 * m1^2 * (m^2 + m4^2 - u3))) + (m^2 - s1 + s2 - u1) * ((m5^2 - s3 + t2 - t3) * (m^2 + m3^2 - u2) + (s2 - s3 + t2 - u1) * (m^2 + m4^2 - u3)) + ((m^2 + m1^2 - s1) * (-s2 + s3 - t2 + u1) - 2 * m1^2 * (m^2 + m3^2 - u2)) * (m^2 - t2 + t3 - u3)) - (-s2 + s3 - t2 + u1) * (-((m^2 + t2 - u1 - u2) * (2 * m^2 * (m5^2 - s3 + t2 - t3) - (m^2 + m1^2 - s1) * (m^2 + m4^2 - u3))) + (m^2 + m2^2 - u1) * ((m5^2 - s3 + t2 - t3) * (m^2 + m3^2 - u2) + (s2 - s3 + t2 - u1) * (m^2 + m4^2 - u3)) + (2 * m^2 * (-s2 + s3 - t2 + u1) - (m^2 + m1^2 - s1) * (m^2 + m3^2 - u2)) * (m^2 - t2 + t3 - u3)) + (-2 * ((m^2 + m1^2 - s1) * (-s2 + s3 - t2 + u1) - 2 * m1^2 * (m^2 + m3^2 - u2)) * m2^2 - 2 * m3^2 * (2 * m1^2 * (m^2 + m2^2 - u1) - (m^2 + m1^2 - s1) * (m^2 - s1 + s2 - u1)) + (m^2 - s1 + s2 - u1) * ((m^2 + m2^2 - u1) * (-s2 + s3 - t2 + u1) - (m^2 - s1 + s2 - u1) * (m^2 + m3^2 - u2)) - (-s2 + s3 - t2 + u1) * ((m^2 - s1 + s2 - u1) * (m^2 + m3^2 - u2) - (m^2 + m2^2 - u1) * (-s2 + s3 - t2 + u1)) + ((m^2 + m1^2 - s1) * (m^2 - s1 + s2 - u1) - 2 * m1^2 * (m^2 + m2^2 - u1)) * (m^2 + t2 - u1 - u2) + (2 * m1^2 * (m^2 + m3^2 - u2) - (m^2 + m1^2 - s1) * (-s2 + s3 - t2 + u1)) * (m^2 + t2 - u1 - u2)) * (m^2 + m4^2 - u3) + (-2 * ((m^2 + m1^2 - s1)^2 - 4 * m^2 * m1^2) * m3^2 + (m^2 + m2^2 - u1) * ((m^2 + m1^2 - s1) * (-s2 + s3 - t2 + u1) - 2 * m1^2 * (m^2 + m3^2 - u2)) - (m^2 - s1 + s2 - u1) * (2 * m^2 * (-s2 + s3 - t2 + u1) - (m^2 + m1^2 - s1) * (m^2 + m3^2 - u2)) + (-s2 + s3 - t2 + u1) * ((m^2 + m1^2 - s1) * (m^2 + m3^2 - u2) - 2 * m^2 * (-s2 + s3 - t2 + u1)) - (2 * m1^2 * (m^2 + m3^2 - u2) - (m^2 + m1^2 - s1) * (-s2 + s3 - t2 + u1)) * (m^2 + m3^2 - u2) + (4 * m^2 * m1^2 - (m^2 + m1^2 - s1)^2) * (m^2 + t2 - u1 - u2)) * (m^2 - t2 + t3 - u3)))
    tmp_c = (1 / 32 * (2 * (-4 * (s2 * m^4 - ((m2^2 - s1 + s2) * m1^2 - s2^2 + s1 * s2 + m2^2 * (s2 - u1) + s1 * u1 + s2 * u1) * m^2 + m1^4 * m2^2 + s1 * ((s2 - u1) * m2^2 + u1 * (s1 - s2 + u1)) + m1^2 * (m2^4 - (s1 + s2 + u1) * m2^2 + (s2 - s1) * u1)) * m3^2 + (-s2 + s3 - t2 + u1) * (-2 * (2 * m^2 * (-s2 + s3 - t2 + u1) - (m^2 + m1^2 - s1) * (m^2 + m3^2 - u2)) * m2^2 + (m^2 + m2^2 - u1) * ((m^2 + m2^2 - u1) * (-s2 + s3 - t2 + u1) - (m^2 - s1 + s2 - u1) * (m^2 + m3^2 - u2)) + (m^4 - (m1^2 + m2^2 + s1 - 2 * s2 + u1) * m^2 - (m1^2 - s1) * (m2^2 - u1)) * (m^2 + t2 - u1 - u2)) - (-2 * ((m^2 + m1^2 - s1) * (-s2 + s3 - t2 + u1) - 2 * m1^2 * (m^2 + m3^2 - u2)) * m2^2 + (m^2 - s1 + s2 - u1) * ((m^2 + m2^2 - u1) * (-s2 + s3 - t2 + u1) - (m^2 - s1 + s2 - u1) * (m^2 + m3^2 - u2)) + ((m^2 + m1^2 - s1) * (m^2 - s1 + s2 - u1) - 2 * m1^2 * (m^2 + m2^2 - u1)) * (m^2 + t2 - u1 - u2)) * (m^2 + m3^2 - u2) - ((m^2 + m2^2 - u1) * ((m^2 + m1^2 - s1) * (-s2 + s3 - t2 + u1) - 2 * m1^2 * (m^2 + m3^2 - u2)) - (m^2 - s1 + s2 - u1) * (2 * m^2 * (-s2 + s3 - t2 + u1) - (m^2 + m1^2 - s1) * (m^2 + m3^2 - u2)) + (4 * m^2 * m1^2 - (m^2 + m1^2 - s1)^2) * (m^2 + t2 - u1 - u2)) * (m^2 + t2 - u1 - u2)) * m4^2 - (m5^2 - s3 + t2 - t3) * (-2 * (-2 * (2 * m^2 * (m5^2 - s3 + t2 - t3) - (m^2 + m1^2 - s1) * (m^2 + m4^2 - u3)) * m2^2 + (m^2 + m2^2 - u1) * ((m5^2 - s3 + t2 - t3) * (m^2 + m2^2 - u1) - (m^2 - s1 + s2 - u1) * (m^2 + m4^2 - u3)) + (m^4 - (m1^2 + m2^2 + s1 - 2 * s2 + u1) * m^2 - (m1^2 - s1) * (m2^2 - u1)) * (m^2 - t2 + t3 - u3)) * m3^2 + (m^2 + t2 - u1 - u2) * (-((m^2 + t2 - u1 - u2) * (2 * m^2 * (m5^2 - s3 + t2 - t3) - (m^2 + m1^2 - s1) * (m^2 + m4^2 - u3))) + (m^2 + m2^2 - u1) * ((m5^2 - s3 + t2 - t3) * (m^2 + m3^2 - u2) + (s2 - s3 + t2 - u1) * (m^2 + m4^2 - u3)) + (2 * m^2 * (-s2 + s3 - t2 + u1) - (m^2 + m1^2 - s1) * (m^2 + m3^2 - u2)) * (m^2 - t2 + t3 - u3)) - (m^2 + m3^2 - u2) * (2 * ((m5^2 - s3 + t2 - t3) * (m^2 + m3^2 - u2) + (s2 - s3 + t2 - u1) * (m^2 + m4^2 - u3)) * m2^2 - (m^2 + t2 - u1 - u2) * ((m5^2 - s3 + t2 - t3) * (m^2 + m2^2 - u1) - (m^2 - s1 + s2 - u1) * (m^2 + m4^2 - u3)) + ((m^2 + m2^2 - u1) * (-s2 + s3 - t2 + u1) - (m^2 - s1 + s2 - u1) * (m^2 + m3^2 - u2)) * (m^2 - t2 + t3 - u3))) + (-2 * (-2 * ((m^2 + m1^2 - s1) * (m5^2 - s3 + t2 - t3) - 2 * m1^2 * (m^2 + m4^2 - u3)) * m2^2 + (m^2 - s1 + s2 - u1) * ((m5^2 - s3 + t2 - t3) * (m^2 + m2^2 - u1) - (m^2 - s1 + s2 - u1) * (m^2 + m4^2 - u3)) + ((m^2 + m1^2 - s1) * (m^2 - s1 + s2 - u1) - 2 * m1^2 * (m^2 + m2^2 - u1)) * (m^2 - t2 + t3 - u3)) * m3^2 + (m^2 + t2 - u1 - u2) * (-((m^2 + t2 - u1 - u2) * ((m^2 + m1^2 - s1) * (m5^2 - s3 + t2 - t3) - 2 * m1^2 * (m^2 + m4^2 - u3))) + (m^2 - s1 + s2 - u1) * ((m5^2 - s3 + t2 - t3) * (m^2 + m3^2 - u2) + (s2 - s3 + t2 - u1) * (m^2 + m4^2 - u3)) + ((m^2 + m1^2 - s1) * (-s2 + s3 - t2 + u1) - 2 * m1^2 * (m^2 + m3^2 - u2)) * (m^2 - t2 + t3 - u3)) - (-s2 + s3 - t2 + u1) * (2 * ((m5^2 - s3 + t2 - t3) * (m^2 + m3^2 - u2) + (s2 - s3 + t2 - u1) * (m^2 + m4^2 - u3)) * m2^2 - (m^2 + t2 - u1 - u2) * ((m5^2 - s3 + t2 - t3) * (m^2 + m2^2 - u1) - (m^2 - s1 + s2 - u1) * (m^2 + m4^2 - u3)) + ((m^2 + m2^2 - u1) * (-s2 + s3 - t2 + u1) - (m^2 - s1 + s2 - u1) * (m^2 + m3^2 - u2)) * (m^2 - t2 + t3 - u3))) * (m^2 + m4^2 - u3) + (-2 * ((m^2 + m2^2 - u1) * ((m^2 + m1^2 - s1) * (m5^2 - s3 + t2 - t3) - 2 * m1^2 * (m^2 + m4^2 - u3)) - (m^2 - s1 + s2 - u1) * (2 * m^2 * (m5^2 - s3 + t2 - t3) - (m^2 + m1^2 - s1) * (m^2 + m4^2 - u3)) + (4 * m^2 * m1^2 - (m^2 + m1^2 - s1)^2) * (m^2 - t2 + t3 - u3)) * m3^2 - (m^2 + m3^2 - u2) * (-((m^2 + t2 - u1 - u2) * ((m^2 + m1^2 - s1) * (m5^2 - s3 + t2 - t3) - 2 * m1^2 * (m^2 + m4^2 - u3))) + (m^2 - s1 + s2 - u1) * ((m5^2 - s3 + t2 - t3) * (m^2 + m3^2 - u2) + (s2 - s3 + t2 - u1) * (m^2 + m4^2 - u3)) + ((m^2 + m1^2 - s1) * (-s2 + s3 - t2 + u1) - 2 * m1^2 * (m^2 + m3^2 - u2)) * (m^2 - t2 + t3 - u3)) + (-s2 + s3 - t2 + u1) * (-((m^2 + t2 - u1 - u2) * (2 * m^2 * (m5^2 - s3 + t2 - t3) - (m^2 + m1^2 - s1) * (m^2 + m4^2 - u3))) + (m^2 + m2^2 - u1) * ((m5^2 - s3 + t2 - t3) * (m^2 + m3^2 - u2) + (s2 - s3 + t2 - u1) * (m^2 + m4^2 - u3)) + (2 * m^2 * (-s2 + s3 - t2 + u1) - (m^2 + m1^2 - s1) * (m^2 + m3^2 - u2)) * (m^2 - t2 + t3 - u3))) * (m^2 - t2 + t3 - u3)))
    # Δ = sqrt(abs(tmp_b^2 - 4 * tmp_a * tmp_c))
    Δ = sqrt(abs(tmp_b^2 - 4 * tmp_a * tmp_c)) # the Discriminant should be positive always.
    return @SVector [(-Δ - tmp_b) / (2 * tmp_a), (Δ - tmp_b) / (2 * tmp_a)]
end


function byckling24_quadratic(s, ma, mb, m1, m2, m3, m4, hs3, t3, hs2, t2, s3, t1, s2)
    tmp_a = ((2 * m3^2 * (-4 * m1^2 * ma^2 - 4 * m2^2 * ma^2 - 4 * (hs2 - m1^2 - m2^2) * ma^2 + (m1^2 + ma^2 - t1) * (hs2 + ma^2 - t2) - (hs2 - m1^2 + t1 - t2) * (-hs2 - ma^2 + t2)) + (-hs2 + hs3 + t2 - t3) * (-((-hs2 + hs3 + m2^2 - s2) * (hs2 + ma^2 - t2)) + (-m2^2 - m3^2 + s2) * (-hs2 - ma^2 + t2) + 2 * (hs2 - m1^2 - m2^2) * (-hs2 + hs3 + t2 - t3) - 2 * m1^2 * (hs2 - hs3 - t2 + t3) - 2 * m2^2 * (hs2 - hs3 - t2 + t3)) + (-hs2 + hs3 + m2^2 - s2) * (2 * ma^2 * (-hs2 + hs3 + m2^2 - s2) + 2 * ma^2 * (-m2^2 - m3^2 + s2) - (hs2 - m1^2 + t1 - t2) * (-hs2 + hs3 + t2 - t3) + (m1^2 + ma^2 - t1) * (hs2 - hs3 - t2 + t3)) - (-m2^2 - m3^2 + s2) * (-2 * ma^2 * (-hs2 + hs3 + m2^2 - s2) - 2 * ma^2 * (-m2^2 - m3^2 + s2) + (m1^2 + ma^2 - t1) * (-hs2 + hs3 + t2 - t3) - (hs2 - m1^2 + t1 - t2) * (hs2 - hs3 - t2 + t3))) / 32)

    tmp_b = ((2 * m3^2 * ((hs2 - m1^2 - m2^2) * (m1^2 * ma^2 - ma^4 + m1^2 * mb^2 + ma^2 * mb^2 - m1^2 * s + ma^2 * s + ma^2 * t1 - mb^2 * t1 + s * t1) + 2 * m2^2 * (2 * m1^2 * ma^2 - 2 * ma^4 + 2 * m1^2 * mb^2 + 2 * ma^2 * mb^2 - 2 * m1^2 * s + 2 * ma^2 * s + 2 * ma^2 * t1 - 2 * mb^2 * t1 + 2 * s * t1) + (-4 * m1^2 * ma^2 - 2 * (hs2 - m1^2 - m2^2) * ma^2 + (m1^2 + ma^2 - t1) * (hs2 + ma^2 - t2)) * (-s3 - t1 + t2) - (hs2 - m1^2 + t1 - t2) * (-(hs2 * ma^2) + m1^2 * ma^2 + (hs2 - m1^2 - m2^2) * (ma^2 + mb^2 - s) + hs2 * s - m1^2 * s - 2 * m1^2 * (-ma^2 - mb^2 + s) + m1^2 * s3 + ma^2 * s3 + hs2 * t1 + s * t1 - s3 * t1 + (-ma^2 + s + t1) * (hs2 + ma^2 - t2) - m1^2 * t2 - s * t2) + (m1^2 + ma^2 - t1) * (hs2 * ma^2 - m1^2 * ma^2 - hs2 * s + m1^2 * s - m1^2 * s3 - ma^2 * s3 - hs2 * t1 - s * t1 + s3 * t1 + m1^2 * t2 + s * t2) - 2 * m1^2 * (-((-ma^2 - mb^2 + s) * (hs2 - m1^2 + t1 - t2)) + 2 * ma^2 * (-s3 - t1 + t2)) - (hs2 - m1^2 - m2^2) * ((-ma^2 - mb^2 + s) * (m1^2 + ma^2 - t1) - 2 * ma^2 * (-ma^2 + s + t1) - (-ma^2 - mb^2 + s) * (hs2 - m1^2 + t1 - t2) + 2 * ma^2 * (-s3 - t1 + t2))) - (-m4^2 + s3 - t2 + t3) * ((-m2^2 - m3^2 + s2) * (-4 * m1^2 * ma^2 - 2 * (hs2 - m1^2 - m2^2) * ma^2 + (m1^2 + ma^2 - t1) * (hs2 + ma^2 - t2)) - 2 * m2^2 * (-2 * ma^2 * (-hs2 + hs3 + m2^2 - s2) + (m1^2 + ma^2 - t1) * (-hs2 + hs3 + t2 - t3)) - (hs2 - m1^2 + t1 - t2) * ((-hs2 + hs3 + m2^2 - s2) * (hs2 + ma^2 - t2) - (hs2 - m1^2 - m2^2) * (-hs2 + hs3 + t2 - t3) + 2 * m1^2 * (hs2 - hs3 - t2 + t3)) + (hs2 - m1^2 - m2^2) * (2 * ma^2 * (-hs2 + hs3 + m2^2 - s2) + (m1^2 + ma^2 - t1) * (hs2 - hs3 - t2 + t3))) - (-m2^2 - m3^2 + s2) * ((-hs2 + hs3 + m2^2 - s2) * (m1^2 * ma^2 - ma^4 + m1^2 * mb^2 + ma^2 * mb^2 - m1^2 * s + ma^2 * s + ma^2 * t1 - mb^2 * t1 + s * t1) + (-m2^2 - m3^2 + s2) * (2 * m1^2 * ma^2 - 2 * ma^4 + 2 * m1^2 * mb^2 + 2 * ma^2 * mb^2 - 2 * m1^2 * s + 2 * ma^2 * s + 2 * ma^2 * t1 - 2 * mb^2 * t1 + 2 * s * t1) + (-s3 - t1 + t2) * (-2 * ma^2 * (-hs2 + hs3 + m2^2 - s2) + (m1^2 + ma^2 - t1) * (-hs2 + hs3 + t2 - t3)) - 2 * m1^2 * (-((-ma^2 - mb^2 + s) * (-hs2 + hs3 + t2 - t3)) + 2 * ma^2 * (-m4^2 + s3 - t2 + t3)) - (hs2 - m1^2 - m2^2) * (-((-ma^2 - mb^2 + s) * (-hs2 + hs3 + t2 - t3)) + 2 * ma^2 * (-m4^2 + s3 - t2 + t3)) - (hs2 - m1^2 + t1 - t2) * ((ma^2 + mb^2 - s) * (-hs2 + hs3 + m2^2 - s2) + 2 * (-ma^2 + s + t1) * (-hs2 + hs3 + t2 - t3) - (m1^2 + ma^2 - t1) * (-m4^2 + s3 - t2 + t3)) + (m1^2 + ma^2 - t1) * (-((-ma^2 + s + t1) * (-hs2 + hs3 + t2 - t3)) + (m1^2 + ma^2 - t1) * (-m4^2 + s3 - t2 + t3))) + (-hs2 + hs3 + t2 - t3) * ((-m2^2 - m3^2 + s2) * (-(hs2 * ma^2) + m1^2 * ma^2 + (hs2 - m1^2 - m2^2) * (ma^2 + mb^2 - s) + hs2 * s - m1^2 * s - 2 * m1^2 * (-ma^2 - mb^2 + s) + m1^2 * s3 + ma^2 * s3 + hs2 * t1 + s * t1 - s3 * t1 + (-ma^2 + s + t1) * (hs2 + ma^2 - t2) - m1^2 * t2 - s * t2) - (-hs2 + hs3 + m2^2 - s2) * (hs2 * ma^2 - m1^2 * ma^2 - hs2 * s + m1^2 * s - m1^2 * s3 - ma^2 * s3 - hs2 * t1 - s * t1 + s3 * t1 + m1^2 * t2 + s * t2) - (-s3 - t1 + t2) * ((-hs2 + hs3 + m2^2 - s2) * (hs2 + ma^2 - t2) - (hs2 - m1^2 - m2^2) * (-hs2 + hs3 + t2 - t3) + 2 * m1^2 * (hs2 - hs3 - t2 + t3)) - 2 * m2^2 * ((ma^2 + mb^2 - s) * (-hs2 + hs3 + m2^2 - s2) + 2 * (-ma^2 + s + t1) * (-hs2 + hs3 + t2 - t3) - (m1^2 + ma^2 - t1) * (-m4^2 + s3 - t2 + t3)) + (hs2 - m1^2 - m2^2) * (-((-ma^2 + s + t1) * (-hs2 + hs3 + t2 - t3)) + (m1^2 + ma^2 - t1) * (-m4^2 + s3 - t2 + t3)) + (hs2 - m1^2 - m2^2) * ((-ma^2 - mb^2 + s) * (-hs2 + hs3 + m2^2 - s2) + (-s3 - t1 + t2) * (-hs2 + hs3 + t2 - t3) + (-ma^2 + s + t1) * (hs2 - hs3 - t2 + t3) - (hs2 - m1^2 + t1 - t2) * (-m4^2 + s3 - t2 + t3)) - 2 * m1^2 * (-((-s3 - t1 + t2) * (-hs2 + hs3 + t2 - t3)) + (hs2 - m1^2 + t1 - t2) * (-m4^2 + s3 - t2 + t3))) + (-hs2 + hs3 + m2^2 - s2) * ((-hs2 + hs3 + m2^2 - s2) * (-((-ma^2 - mb^2 + s) * (hs2 - m1^2 + t1 - t2)) + 2 * ma^2 * (-s3 - t1 + t2)) + (-m2^2 - m3^2 + s2) * ((-ma^2 - mb^2 + s) * (m1^2 + ma^2 - t1) - 2 * ma^2 * (-ma^2 + s + t1) - (-ma^2 - mb^2 + s) * (hs2 - m1^2 + t1 - t2) + 2 * ma^2 * (-s3 - t1 + t2)) + (-s3 - t1 + t2) * (2 * ma^2 * (-hs2 + hs3 + m2^2 - s2) + (m1^2 + ma^2 - t1) * (hs2 - hs3 - t2 + t3)) - 2 * m2^2 * (-((-ma^2 - mb^2 + s) * (-hs2 + hs3 + t2 - t3)) + 2 * ma^2 * (-m4^2 + s3 - t2 + t3)) - (hs2 - m1^2 - m2^2) * (-((-ma^2 - mb^2 + s) * (-hs2 + hs3 + t2 - t3)) + 2 * ma^2 * (-m4^2 + s3 - t2 + t3)) - (hs2 - m1^2 + t1 - t2) * ((-ma^2 - mb^2 + s) * (-hs2 + hs3 + m2^2 - s2) + (-s3 - t1 + t2) * (-hs2 + hs3 + t2 - t3) + (-ma^2 + s + t1) * (hs2 - hs3 - t2 + t3) - (hs2 - m1^2 + t1 - t2) * (-m4^2 + s3 - t2 + t3)) + (m1^2 + ma^2 - t1) * (-((-s3 - t1 + t2) * (-hs2 + hs3 + t2 - t3)) + (hs2 - m1^2 + t1 - t2) * (-m4^2 + s3 - t2 + t3)))) / 32)

    tmp_c = ((2 * m3^2 * (2 * m2^2 * (-2 * m1^4 * mb^2 + 2 * m1^2 * ma^2 * mb^2 - 2 * m1^2 * mb^4 + 2 * m1^2 * mb^2 * s - 2 * ma^2 * mb^2 * s - 2 * m1^2 * ma^2 * t1 + 2 * m1^2 * mb^2 * t1 + 2 * m1^2 * s * t1 + 2 * ma^2 * s * t1 + 2 * mb^2 * s * t1 - 2 * s^2 * t1 - 2 * s * t1^2) + (-s3 - t1 + t2) * ((hs2 - m1^2 - m2^2) * (m1^2 * ma^2 - ma^4 + m1^2 * mb^2 + ma^2 * mb^2 - m1^2 * s + ma^2 * s + ma^2 * t1 - mb^2 * t1 + s * t1) + (m1^2 + ma^2 - t1) * (hs2 * ma^2 - m1^2 * ma^2 - hs2 * s + m1^2 * s - m1^2 * s3 - ma^2 * s3 - hs2 * t1 - s * t1 + s3 * t1 + m1^2 * t2 + s * t2) - 2 * m1^2 * (-((-ma^2 - mb^2 + s) * (hs2 - m1^2 + t1 - t2)) + 2 * ma^2 * (-s3 - t1 + t2))) - (hs2 - m1^2 + t1 - t2) * ((hs2 - m1^2 - m2^2) * (-2 * mb^2 * (m1^2 + ma^2 - t1) + (-ma^2 - mb^2 + s) * (-ma^2 + s + t1)) + (-ma^2 + s + t1) * (hs2 * ma^2 - m1^2 * ma^2 - hs2 * s + m1^2 * s - m1^2 * s3 - ma^2 * s3 - hs2 * t1 - s * t1 + s3 * t1 + m1^2 * t2 + s * t2) - 2 * m1^2 * (-2 * mb^2 * (hs2 - m1^2 + t1 - t2) + (-ma^2 - mb^2 + s) * (-s3 - t1 + t2))) - (hs2 - m1^2 - m2^2) * ((hs2 - m1^2 - m2^2) * (-ma^4 + 2 * ma^2 * mb^2 - mb^4 + 2 * ma^2 * s + 2 * mb^2 * s - s^2) - (-ma^2 + s + t1) * (-((-ma^2 - mb^2 + s) * (hs2 - m1^2 + t1 - t2)) + 2 * ma^2 * (-s3 - t1 + t2)) + (m1^2 + ma^2 - t1) * (-2 * mb^2 * (hs2 - m1^2 + t1 - t2) + (-ma^2 - mb^2 + s) * (-s3 - t1 + t2)))) - (-m2^2 - m3^2 + s2) * ((-m2^2 - m3^2 + s2) * (-2 * m1^4 * mb^2 + 2 * m1^2 * ma^2 * mb^2 - 2 * m1^2 * mb^4 + 2 * m1^2 * mb^2 * s - 2 * ma^2 * mb^2 * s - 2 * m1^2 * ma^2 * t1 + 2 * m1^2 * mb^2 * t1 + 2 * m1^2 * s * t1 + 2 * ma^2 * s * t1 + 2 * mb^2 * s * t1 - 2 * s^2 * t1 - 2 * s * t1^2) - (hs2 - m1^2 - m2^2) * ((-ma^4 + 2 * ma^2 * mb^2 - mb^4 + 2 * ma^2 * s + 2 * mb^2 * s - s^2) * (-hs2 + hs3 + m2^2 - s2) - (-ma^2 + s + t1) * (-((-ma^2 - mb^2 + s) * (-hs2 + hs3 + t2 - t3)) + 2 * ma^2 * (-m4^2 + s3 - t2 + t3)) + (m1^2 + ma^2 - t1) * (-2 * mb^2 * (-hs2 + hs3 + t2 - t3) + (-ma^2 - mb^2 + s) * (-m4^2 + s3 - t2 + t3))) + (-s3 - t1 + t2) * ((-hs2 + hs3 + m2^2 - s2) * (m1^2 * ma^2 - ma^4 + m1^2 * mb^2 + ma^2 * mb^2 - m1^2 * s + ma^2 * s + ma^2 * t1 - mb^2 * t1 + s * t1) - 2 * m1^2 * (-((-ma^2 - mb^2 + s) * (-hs2 + hs3 + t2 - t3)) + 2 * ma^2 * (-m4^2 + s3 - t2 + t3)) + (m1^2 + ma^2 - t1) * (-((-ma^2 + s + t1) * (-hs2 + hs3 + t2 - t3)) + (m1^2 + ma^2 - t1) * (-m4^2 + s3 - t2 + t3))) - (hs2 - m1^2 + t1 - t2) * ((-hs2 + hs3 + m2^2 - s2) * (-2 * mb^2 * (m1^2 + ma^2 - t1) + (-ma^2 - mb^2 + s) * (-ma^2 + s + t1)) - 2 * m1^2 * (-2 * mb^2 * (-hs2 + hs3 + t2 - t3) + (-ma^2 - mb^2 + s) * (-m4^2 + s3 - t2 + t3)) + (-ma^2 + s + t1) * (-((-ma^2 + s + t1) * (-hs2 + hs3 + t2 - t3)) + (m1^2 + ma^2 - t1) * (-m4^2 + s3 - t2 + t3)))) - (-m4^2 + s3 - t2 + t3) * ((-m2^2 - m3^2 + s2) * ((hs2 - m1^2 - m2^2) * (m1^2 * ma^2 - ma^4 + m1^2 * mb^2 + ma^2 * mb^2 - m1^2 * s + ma^2 * s + ma^2 * t1 - mb^2 * t1 + s * t1) + (m1^2 + ma^2 - t1) * (hs2 * ma^2 - m1^2 * ma^2 - hs2 * s + m1^2 * s - m1^2 * s3 - ma^2 * s3 - hs2 * t1 - s * t1 + s3 * t1 + m1^2 * t2 + s * t2) - 2 * m1^2 * (-((-ma^2 - mb^2 + s) * (hs2 - m1^2 + t1 - t2)) + 2 * ma^2 * (-s3 - t1 + t2))) - 2 * m2^2 * ((-hs2 + hs3 + m2^2 - s2) * (m1^2 * ma^2 - ma^4 + m1^2 * mb^2 + ma^2 * mb^2 - m1^2 * s + ma^2 * s + ma^2 * t1 - mb^2 * t1 + s * t1) - 2 * m1^2 * (-((-ma^2 - mb^2 + s) * (-hs2 + hs3 + t2 - t3)) + 2 * ma^2 * (-m4^2 + s3 - t2 + t3)) + (m1^2 + ma^2 - t1) * (-((-ma^2 + s + t1) * (-hs2 + hs3 + t2 - t3)) + (m1^2 + ma^2 - t1) * (-m4^2 + s3 - t2 + t3))) - (hs2 - m1^2 + t1 - t2) * ((-hs2 + hs3 + m2^2 - s2) * (hs2 * ma^2 - m1^2 * ma^2 - hs2 * s + m1^2 * s - m1^2 * s3 - ma^2 * s3 - hs2 * t1 - s * t1 + s3 * t1 + m1^2 * t2 + s * t2) - (hs2 - m1^2 - m2^2) * (-((-ma^2 + s + t1) * (-hs2 + hs3 + t2 - t3)) + (m1^2 + ma^2 - t1) * (-m4^2 + s3 - t2 + t3)) + 2 * m1^2 * (-((-s3 - t1 + t2) * (-hs2 + hs3 + t2 - t3)) + (hs2 - m1^2 + t1 - t2) * (-m4^2 + s3 - t2 + t3))) + (hs2 - m1^2 - m2^2) * ((-hs2 + hs3 + m2^2 - s2) * (-((-ma^2 - mb^2 + s) * (hs2 - m1^2 + t1 - t2)) + 2 * ma^2 * (-s3 - t1 + t2)) - (hs2 - m1^2 - m2^2) * (-((-ma^2 - mb^2 + s) * (-hs2 + hs3 + t2 - t3)) + 2 * ma^2 * (-m4^2 + s3 - t2 + t3)) + (m1^2 + ma^2 - t1) * (-((-s3 - t1 + t2) * (-hs2 + hs3 + t2 - t3)) + (hs2 - m1^2 + t1 - t2) * (-m4^2 + s3 - t2 + t3)))) + (-hs2 + hs3 + t2 - t3) * ((-m2^2 - m3^2 + s2) * ((hs2 - m1^2 - m2^2) * (-2 * mb^2 * (m1^2 + ma^2 - t1) + (-ma^2 - mb^2 + s) * (-ma^2 + s + t1)) + (-ma^2 + s + t1) * (hs2 * ma^2 - m1^2 * ma^2 - hs2 * s + m1^2 * s - m1^2 * s3 - ma^2 * s3 - hs2 * t1 - s * t1 + s3 * t1 + m1^2 * t2 + s * t2) - 2 * m1^2 * (-2 * mb^2 * (hs2 - m1^2 + t1 - t2) + (-ma^2 - mb^2 + s) * (-s3 - t1 + t2))) - 2 * m2^2 * ((-hs2 + hs3 + m2^2 - s2) * (-2 * mb^2 * (m1^2 + ma^2 - t1) + (-ma^2 - mb^2 + s) * (-ma^2 + s + t1)) - 2 * m1^2 * (-2 * mb^2 * (-hs2 + hs3 + t2 - t3) + (-ma^2 - mb^2 + s) * (-m4^2 + s3 - t2 + t3)) + (-ma^2 + s + t1) * (-((-ma^2 + s + t1) * (-hs2 + hs3 + t2 - t3)) + (m1^2 + ma^2 - t1) * (-m4^2 + s3 - t2 + t3))) - (-s3 - t1 + t2) * ((-hs2 + hs3 + m2^2 - s2) * (hs2 * ma^2 - m1^2 * ma^2 - hs2 * s + m1^2 * s - m1^2 * s3 - ma^2 * s3 - hs2 * t1 - s * t1 + s3 * t1 + m1^2 * t2 + s * t2) - (hs2 - m1^2 - m2^2) * (-((-ma^2 + s + t1) * (-hs2 + hs3 + t2 - t3)) + (m1^2 + ma^2 - t1) * (-m4^2 + s3 - t2 + t3)) + 2 * m1^2 * (-((-s3 - t1 + t2) * (-hs2 + hs3 + t2 - t3)) + (hs2 - m1^2 + t1 - t2) * (-m4^2 + s3 - t2 + t3))) + (hs2 - m1^2 - m2^2) * ((-hs2 + hs3 + m2^2 - s2) * (-2 * mb^2 * (hs2 - m1^2 + t1 - t2) + (-ma^2 - mb^2 + s) * (-s3 - t1 + t2)) - (hs2 - m1^2 - m2^2) * (-2 * mb^2 * (-hs2 + hs3 + t2 - t3) + (-ma^2 - mb^2 + s) * (-m4^2 + s3 - t2 + t3)) + (-ma^2 + s + t1) * (-((-s3 - t1 + t2) * (-hs2 + hs3 + t2 - t3)) + (hs2 - m1^2 + t1 - t2) * (-m4^2 + s3 - t2 + t3)))) + (-hs2 + hs3 + m2^2 - s2) * ((-m2^2 - m3^2 + s2) * ((hs2 - m1^2 - m2^2) * (-ma^4 + 2 * ma^2 * mb^2 - mb^4 + 2 * ma^2 * s + 2 * mb^2 * s - s^2) - (-ma^2 + s + t1) * (-((-ma^2 - mb^2 + s) * (hs2 - m1^2 + t1 - t2)) + 2 * ma^2 * (-s3 - t1 + t2)) + (m1^2 + ma^2 - t1) * (-2 * mb^2 * (hs2 - m1^2 + t1 - t2) + (-ma^2 - mb^2 + s) * (-s3 - t1 + t2))) - 2 * m2^2 * ((-ma^4 + 2 * ma^2 * mb^2 - mb^4 + 2 * ma^2 * s + 2 * mb^2 * s - s^2) * (-hs2 + hs3 + m2^2 - s2) - (-ma^2 + s + t1) * (-((-ma^2 - mb^2 + s) * (-hs2 + hs3 + t2 - t3)) + 2 * ma^2 * (-m4^2 + s3 - t2 + t3)) + (m1^2 + ma^2 - t1) * (-2 * mb^2 * (-hs2 + hs3 + t2 - t3) + (-ma^2 - mb^2 + s) * (-m4^2 + s3 - t2 + t3))) + (-s3 - t1 + t2) * ((-hs2 + hs3 + m2^2 - s2) * (-((-ma^2 - mb^2 + s) * (hs2 - m1^2 + t1 - t2)) + 2 * ma^2 * (-s3 - t1 + t2)) - (hs2 - m1^2 - m2^2) * (-((-ma^2 - mb^2 + s) * (-hs2 + hs3 + t2 - t3)) + 2 * ma^2 * (-m4^2 + s3 - t2 + t3)) + (m1^2 + ma^2 - t1) * (-((-s3 - t1 + t2) * (-hs2 + hs3 + t2 - t3)) + (hs2 - m1^2 + t1 - t2) * (-m4^2 + s3 - t2 + t3))) - (hs2 - m1^2 + t1 - t2) * ((-hs2 + hs3 + m2^2 - s2) * (-2 * mb^2 * (hs2 - m1^2 + t1 - t2) + (-ma^2 - mb^2 + s) * (-s3 - t1 + t2)) - (hs2 - m1^2 - m2^2) * (-2 * mb^2 * (-hs2 + hs3 + t2 - t3) + (-ma^2 - mb^2 + s) * (-m4^2 + s3 - t2 + t3)) + (-ma^2 + s + t1) * (-((-s3 - t1 + t2) * (-hs2 + hs3 + t2 - t3)) + (hs2 - m1^2 + t1 - t2) * (-m4^2 + s3 - t2 + t3))))) / 32)

    Δ = sqrt(abs(tmp_b^2 - 4 * tmp_a * tmp_c)) # the Discriminant should be positive always.
    return @SVector [(-Δ - tmp_b) / (2 * tmp_a), (Δ - tmp_b) / (2 * tmp_a)]
end